// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using WebApi.Data;

namespace WebApi.Migrations
{
    [DbContext(typeof(PrototypePartsDbContext))]
    [Migration("20210217123114_GlobalProjectIndices")]
    partial class GlobalProjectIndices
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("WebApi.Data.EvidenceYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Year")
                        .IsUnique();

                    b.ToTable("EvidenceYears");
                });

            modelBuilder.Entity("WebApi.Data.GateLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Moniker")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Moniker")
                        .IsUnique();

                    b.ToTable("GateLevels");
                });

            modelBuilder.Entity("WebApi.Data.GlobalProject", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Customer")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ProjectNumber")
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "ProjectNumber", "Description", "Customer" });

                    b.HasKey("Id");

                    b.HasIndex("Customer");

                    b.HasIndex("ProjectNumber");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("GlobalProjects");
                });

            modelBuilder.Entity("WebApi.Data.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Moniker")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Moniker")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("WebApi.Data.Outlet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Moniker")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Moniker")
                        .IsUnique();

                    b.ToTable("Outlets");
                });

            modelBuilder.Entity("WebApi.Data.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Moniker")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Moniker")
                        .IsUnique();

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("WebApi.Data.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Moniker")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Moniker")
                        .IsUnique();

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("WebApi.Data.Prototype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("PartTypeCode")
                        .HasColumnType("text");

                    b.Property<string>("PartTypeTitle")
                        .HasColumnType("text");

                    b.Property<int>("PrototypeSetId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PrototypeSetId");

                    b.ToTable("Prototypes");
                });

            modelBuilder.Entity("WebApi.Data.PrototypeCounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("EvidenceYearId")
                        .HasColumnType("integer");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EvidenceYearId");

                    b.HasIndex("LocationId", "EvidenceYearId")
                        .IsUnique();

                    b.ToTable("PrototypeCounters");
                });

            modelBuilder.Entity("WebApi.Data.PrototypeSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer");

                    b.Property<string>("EvidenceYearCode")
                        .HasColumnType("text");

                    b.Property<int>("EvidenceYearTitle")
                        .HasColumnType("integer");

                    b.Property<string>("GateLevelCode")
                        .HasColumnType("text");

                    b.Property<string>("GateLevelTitle")
                        .HasColumnType("text");

                    b.Property<string>("LocationCode")
                        .HasColumnType("text");

                    b.Property<string>("LocationTitle")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<string>("OutletCode")
                        .HasColumnType("text");

                    b.Property<string>("OutletTitle")
                        .HasColumnType("text");

                    b.Property<string>("ProductGroupCode")
                        .HasColumnType("text");

                    b.Property<string>("ProductGroupTitle")
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("SetIdentifier")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("PrototypeSets");
                });

            modelBuilder.Entity("WebApi.Data.PrototypeVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<int>("PrototypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PrototypeId");

                    b.ToTable("PrototypeVariants");
                });

            modelBuilder.Entity("WebApi.Data.PrototypesPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ActualCount")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer");

                    b.Property<string>("EvidenceYearCode")
                        .HasColumnType("text");

                    b.Property<int>("EvidenceYearTitle")
                        .HasColumnType("integer");

                    b.Property<string>("GateLevelCode")
                        .HasColumnType("text");

                    b.Property<string>("GateLevelTitle")
                        .HasColumnType("text");

                    b.Property<int>("InitialCount")
                        .HasColumnType("integer");

                    b.Property<string>("LocationCode")
                        .HasColumnType("text");

                    b.Property<string>("LocationTitle")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<string>("OutletCode")
                        .HasColumnType("text");

                    b.Property<string>("OutletTitle")
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("PackageIdentifier")
                        .HasColumnType("text");

                    b.Property<string>("PartTypeCode")
                        .HasColumnType("text");

                    b.Property<string>("PartTypeTitle")
                        .HasColumnType("text");

                    b.Property<string>("ProductGroupCode")
                        .HasColumnType("text");

                    b.Property<string>("ProductGroupTitle")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OwnerId");

                    b.ToTable("PrototypesPackages");
                });

            modelBuilder.Entity("WebApi.Data.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("WebApi.Data.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Moniker")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Moniker")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("WebApi.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DomainIdentity")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("ServiceAccount")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApi.Data.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("WebApi.Data.Prototype", b =>
                {
                    b.HasOne("WebApi.Data.User", "CreatedBy")
                        .WithMany("PrototypesCreatedBy")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.User", "DeletedBy")
                        .WithMany("PrototypesDeletedBy")
                        .HasForeignKey("DeletedById");

                    b.HasOne("WebApi.Data.User", "ModifiedBy")
                        .WithMany("PrototypesModifiedBy")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.User", "Owner")
                        .WithMany("PrototypesOwner")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.PrototypeSet", "PrototypeSet")
                        .WithMany("Prototypes")
                        .HasForeignKey("PrototypeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Owner");

                    b.Navigation("PrototypeSet");
                });

            modelBuilder.Entity("WebApi.Data.PrototypeCounter", b =>
                {
                    b.HasOne("WebApi.Data.EvidenceYear", "EvidenceYear")
                        .WithMany("PrototypeCounters")
                        .HasForeignKey("EvidenceYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Location", "Location")
                        .WithMany("PrototypeCounters")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvidenceYear");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("WebApi.Data.PrototypeSet", b =>
                {
                    b.HasOne("WebApi.Data.User", "CreatedBy")
                        .WithMany("PrototypeSetsCreatedBy")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.User", "DeletedBy")
                        .WithMany("PrototypeSetsDeletedBy")
                        .HasForeignKey("DeletedById");

                    b.HasOne("WebApi.Data.User", "ModifiedBy")
                        .WithMany("PrototypeSetsModifiedBy")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("WebApi.Data.PrototypeVariant", b =>
                {
                    b.HasOne("WebApi.Data.User", "CreatedBy")
                        .WithMany("PrototypeVariantsCreatedBy")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.User", "DeletedBy")
                        .WithMany("PrototypeVariantsDeletedBy")
                        .HasForeignKey("DeletedById");

                    b.HasOne("WebApi.Data.User", "ModifiedBy")
                        .WithMany("PrototypeVariantsModifiedBy")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Prototype", "Prototype")
                        .WithMany("PrototypeVariants")
                        .HasForeignKey("PrototypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Prototype");
                });

            modelBuilder.Entity("WebApi.Data.PrototypesPackage", b =>
                {
                    b.HasOne("WebApi.Data.User", "CreatedBy")
                        .WithMany("PackagesCreatedBy")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.User", "DeletedBy")
                        .WithMany("PackagesDeletedBy")
                        .HasForeignKey("DeletedById");

                    b.HasOne("WebApi.Data.User", "ModifiedBy")
                        .WithMany("PackagesModifiedBy")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.User", "Owner")
                        .WithMany("PackagesOwner")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("WebApi.Data.RefreshToken", b =>
                {
                    b.HasOne("WebApi.Data.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.UserRole", b =>
                {
                    b.HasOne("WebApi.Data.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.EvidenceYear", b =>
                {
                    b.Navigation("PrototypeCounters");
                });

            modelBuilder.Entity("WebApi.Data.Location", b =>
                {
                    b.Navigation("PrototypeCounters");
                });

            modelBuilder.Entity("WebApi.Data.Prototype", b =>
                {
                    b.Navigation("PrototypeVariants");
                });

            modelBuilder.Entity("WebApi.Data.PrototypeSet", b =>
                {
                    b.Navigation("Prototypes");
                });

            modelBuilder.Entity("WebApi.Data.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("WebApi.Data.User", b =>
                {
                    b.Navigation("PackagesCreatedBy");

                    b.Navigation("PackagesDeletedBy");

                    b.Navigation("PackagesModifiedBy");

                    b.Navigation("PackagesOwner");

                    b.Navigation("PrototypesCreatedBy");

                    b.Navigation("PrototypesDeletedBy");

                    b.Navigation("PrototypeSetsCreatedBy");

                    b.Navigation("PrototypeSetsDeletedBy");

                    b.Navigation("PrototypeSetsModifiedBy");

                    b.Navigation("PrototypesModifiedBy");

                    b.Navigation("PrototypesOwner");

                    b.Navigation("PrototypeVariantsCreatedBy");

                    b.Navigation("PrototypeVariantsDeletedBy");

                    b.Navigation("PrototypeVariantsModifiedBy");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
